---
title: "Genotox_uncertainty"
author: "Martin Paparella"
format: html
editor: visual
---

# Packages

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

```{r}
library(tidyverse)
library(ggridges)
library(patchwork)
library(flextable)
library(gghalves)
library(writexl)
library(ggplot2) 

```

# Load Genotox_DB

```{r}
EFSAgenotoxDB <-
  readxl::read_xlsx(here::here("input", "GENOTOX_incl_codes.xlsx"), sheet = "coded public", col_types ="text") %>% 
  janitor::clean_names()
```

# Filter for valid data

```{r}
EFSAgenotoxDB_filtered <- EFSAgenotoxDB %>%
  filter(acceptability == "Acceptable") %>%
  filter(guideline_qualifier == "According to" | guideline_qualifier == "Equivalent or similar to") %>%
  filter(str_detect(genotoxguidelinefulltxt, "471|473|476|487|490|474|475|483|486|488|489")) %>%
  select(-sub_name, -sub_ecsubinvententryref, -sub_casnumber, -sub_type, -qualifier, -opinion_type, -opinion_author)%>%
  distinct()

```

# Analyse data

## grouped by compound

```{r}
EFSAgenotoxDB_filtered_probs <- EFSAgenotoxDB_filtered %>%
  group_by(genotoxguidelinefulltxt, com_name) %>%
  mutate(count_entries = n()) %>%
  filter(count_entries > 2) %>%
  mutate(
    positive_count = sum(results == "Positive"),
    negative_count = sum(results == "Negative"),
    other_count = sum(results != "Positive" & results != "Negative"),
    majority = case_when(
      positive_count == max(positive_count, negative_count, other_count) ~ "pos",
      negative_count == max(positive_count, negative_count, other_count) ~ "neg",
      other_count == max(positive_count, negative_count, other_count) ~ "other")
    ) %>%
  ungroup()%>%
  group_by(genotoxguidelinefulltxt)%>%
  mutate(min_replicates = min(count_entries, na.rm = TRUE),   
         median_replicates = median(count_entries, na.rm = TRUE),
         max_replicates = max(count_entries, na.rm = TRUE),
         pos=sum(majority == "pos"),
         neg=sum(majority== "neg"),
         other=(sum(majority == "other")))%>%
  ungroup()%>%
  group_by(genotoxguidelinefulltxt, com_name, results) %>%
  mutate(count_pos_neg_o = n())%>%
  mutate(percent_pos_neg_o = count_pos_neg_o / count_entries) %>%
  distinct(genotoxguidelinefulltxt, com_name, results, .keep_all = TRUE) %>%
  mutate(below_66_range = percent_pos_neg_o >= 0.44 & percent_pos_neg_o <= 0.66) %>%
  mutate(in_66_85_range = percent_pos_neg_o >= 0.15 & percent_pos_neg_o < 0.44 | percent_pos_neg_o > 0.66 & percent_pos_neg_o <= 0.85) %>%
  mutate(above_85_range = percent_pos_neg_o < 0.15 | percent_pos_neg_o > 0.85) %>%
  ungroup() %>%
  distinct(genotoxguidelinefulltxt, com_name, .keep_all = TRUE)%>%
  select(-iupacname, -comparamname,-molecularformula,-smilesnotation, -inchi,-smilesnotationsource, -inchi_notationsource)

summarize_data <- function(tg_number) {
  EFSAgenotoxDB_filtered_probs %>%
    filter(str_detect(genotoxguidelinefulltxt, as.character(tg_number))) %>%
    summarize(
      guideline_text = toString(unique(gsub("OECD Guideline", "", genotoxguidelinefulltxt))),
      count_below_66_range = sum(below_66_range, na.rm = TRUE),
      count_in_66_85_range = sum(in_66_85_range, na.rm = TRUE),
      count_above_85_range = sum(above_85_range, na.rm = TRUE),
      min_replicates,   
      median_replicates,
      max_replicates, 
      pos,
      neg,
      other
    ) %>%
    mutate(
      total_n = count_below_66_range + count_in_66_85_range + count_above_85_range,
      perc_below66 = round((count_below_66_range / total_n) * 100, 1),
      perc_66_85 = round((count_in_66_85_range / total_n) * 100, 1),
      perc_above85 = round((count_above_85_range / total_n) * 100, 1),
      TG_analysis = paste("TG", tg_number, "_UnGrouped", sep = "")
    ) %>%
    filter(total_n > 2)
}

# Liste der TG-Nummern
tg_numbers <- c(471, 473, 476, 487, 490, 474, 475, 483, 486, 488, 489)

# Anwenden der Funktion auf jede TG-Nummer und Zusammenführen der Ergebnisse
results <- map_df(tg_numbers, summarize_data)

# Ergebnisse in eine Excel-Datei schreiben
write_xlsx(results, here::here("tables", "EFSAgenotoxDB_filtered_probs_sum.xlsx"))

```

```{r}

EFSAgenotoxDB_filtered_probs <- EFSAgenotoxDB_filtered %>%
  group_by(genotoxguidelinefulltxt, com_name) %>%
  mutate(count_entries = n())%>%
  filter(count_entries > 2) %>%
  ungroup()%>%
  group_by(genotoxguidelinefulltxt)%>%
  mutate(min_replicates = min(count_entries, na.rm = TRUE),   
         max_replicates = max(count_entries, na.rm = TRUE),   
         median_replicates = median(count_entries, na.rm = TRUE)
  ) %>%
  ungroup()%>%
  group_by(genotoxguidelinefulltxt, com_name, results) %>%
  mutate(count_pos_neg = n())%>%
  mutate(positive_count = sum(results == "Positive"), negative_count=sum(results=="Negative"), other_count =sum(results != "Positive" & results != "Negative"))%>%
  mutate(percent_pos_neg = count_pos_neg / count_entries) %>%
  distinct(genotoxguidelinefulltxt, com_name, results, .keep_all = TRUE) %>%
  mutate(below_66_range = percent_pos_neg >= 0.44 & percent_pos_neg <= 0.66) %>%
  mutate(in_66_85_range = percent_pos_neg >= 0.15 & percent_pos_neg < 0.44 | percent_pos_neg > 0.66 & percent_pos_neg <= 0.85) %>%
  mutate(above_85_range = percent_pos_neg < 0.15 | percent_pos_neg > 0.85) %>%
  ungroup() %>%
  distinct(genotoxguidelinefulltxt, com_name, .keep_all = TRUE)

summarize_data <- function(tg_number) {
  EFSAgenotoxDB_filtered_probs %>%
    filter(str_detect(genotoxguidelinefulltxt, as.character(tg_number))) %>%
    summarise(
      guideline_text = toString(unique(gsub("OECD Guideline", "", genotoxguidelinefulltxt))),
      count_below_66_range = sum(below_66_range, na.rm = TRUE),
      count_in_66_85_range = sum(in_66_85_range, na.rm = TRUE),
      count_above_85_range = sum(above_85_range, na.rm = TRUE),
      min_replicates = min(min_replicates, na.rm = TRUE),   
      median_replicates = median(median_replicates, na.rm = TRUE), 
      max_replicates = max(max_replicates, na.rm = TRUE)    
    ) %>%
    mutate(
      total_n = count_below_66_range + count_in_66_85_range + count_above_85_range,
      perc_below66 = round((count_below_66_range / total_n) * 100, 1),
      perc_66_85 = round((count_in_66_85_range / total_n) * 100, 1),
      perc_above85 = round((count_above_85_range / total_n) * 100, 1),
      TG_analysis = paste("TG", tg_number, "_UnGrouped", sep = "")
    ) %>%
    filter(total_n > 2)
}

# Liste der TG-Nummern
tg_numbers <- c(471, 473, 476, 487, 490, 474, 475, 483, 486, 488, 489)

# Anwenden der Funktion auf jede TG-Nummer und Zusammenführen der Ergebnisse
results <- map_df(tg_numbers, summarize_data)

# Ergebnisse in eine Excel-Datei schreiben
write_xlsx(results, here::here("tables", "EFSAgenotoxDB_filtered_probs_sum.xlsx"))

```

#### Visualize

```{r}
long_data <- results %>%
  mutate(guideline_text_wrapped = str_wrap(guideline_text, width = 30),
         TG_analysis_label = paste(guideline_text_wrapped, " (n=", total_n, ")\n", 
                                   "min/med/max_repl/chem: ", min_replicates, "/", median_replicates, "/", max_replicates, sep = ""))%>%
  pivot_longer(cols = c("perc_below66", "perc_66_85", "perc_above85"),
               names_to = "Category",
               values_to = "Percentage") %>%
  mutate(Category = factor(Category, levels = c("perc_below66","perc_66_85", "perc_above85")))

# Erstellen des Plots
ggplot(long_data, aes(x = TG_analysis_label, y = Percentage, fill = Category)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = c("perc_above85" = "green", "perc_66_85" = "yellow", "perc_below66" = "red")) +
  theme_minimal() +
  labs(x = "", y = "Percentage", fill = "Range Category") +
  ggtitle("Variability grouped by chemicals") +
  theme(axis.text.x = element_text(angle = 75, hjust = 0, vjust = 0.1))

# Speichern des Plots als PNG
ggsave(plot = last_plot(), filename = "bardiagram_EFSAgenotoxDB_filtered_probs.png", 
       path = here::here("figures"), height = 200, width = 300, units = "mm", device = "png")


```

## grouped by compound_name & literature_reference

```{r}
EFSAgenotoxDB_filtered_probs_RefGrouped <- EFSAgenotoxDB_filtered %>%
  group_by(genotoxguidelinefulltxt, com_name, literature_reference) %>%
 mutate(result_lit = ifelse(all(results == "Negative"), "negative", "positive"))%>%
  ungroup()%>%
  distinct(literature_reference, .keep_all = TRUE)%>%
  group_by(genotoxguidelinefulltxt,com_name)%>%
  mutate(count_entries = n()) %>%
  filter(count_entries > 2)%>%
  ungroup()%>%
  group_by(genotoxguidelinefulltxt)%>%
  mutate(min_replicates = min(count_entries, na.rm = TRUE),   
         max_replicates = max(count_entries, na.rm = TRUE),   
         median_replicates = median(count_entries, na.rm = TRUE)
  ) %>%
  ungroup()%>%
  group_by(genotoxguidelinefulltxt, com_name, result_lit)%>%
  mutate(count_pos_neg = n())%>%
  mutate(percent_pos_neg = count_pos_neg/count_entries)%>%
 distinct(com_name, result_lit, .keep_all = TRUE)%>%
 mutate(below_66_range = percent_pos_neg >= 0.44 & percent_pos_neg <= 0.66)%>%
mutate(in_66_85_range = percent_pos_neg >= 0.15 & percent_pos_neg < 0.44 | percent_pos_neg > 0.66 & percent_pos_neg <= 0.85 )%>%
mutate(above_85_range = percent_pos_neg < 0.15 | percent_pos_neg > 0.85 )%>%
   ungroup()%>%
  distinct(genotoxguidelinefulltxt, com_name, .keep_all = TRUE)

summarize_data_RefGrouped <- function(tg_number) {
  EFSAgenotoxDB_filtered_probs_RefGrouped %>%
    filter(str_detect(genotoxguidelinefulltxt, as.character(tg_number))) %>%
    summarise(
      guideline_text = toString(unique(gsub("OECD Guideline", "", genotoxguidelinefulltxt))),
      count_below_66_range = sum(below_66_range, na.rm = TRUE),
      count_in_66_85_range = sum(in_66_85_range, na.rm = TRUE),
      count_above_85_range = sum(above_85_range, na.rm = TRUE),
      min_replicates = min(min_replicates, na.rm = TRUE),   
      median_replicates = median(median_replicates, na.rm = TRUE), 
      max_replicates = max(max_replicates, na.rm = TRUE)) %>%
    mutate(
      total_n = count_below_66_range + count_in_66_85_range + count_above_85_range,
      perc_below66 = round((count_below_66_range / total_n) * 100, 1),
      perc_66_85 = round((count_in_66_85_range / total_n) * 100, 1),
      perc_above85 = round((count_above_85_range / total_n) * 100, 1),
      TG_analysis = paste("TG", tg_number, "_RefGrouped", sep = ""),
    )%>%
    filter(total_n > 2)
}

# Liste der TG Nummern
tg_numbers <- c(471, 473, 476, 487, 490, 474, 475, 483, 486, 488, 489)

# Anwenden der Funktion auf jede TG Nummer und Zusammenführen der Ergebnisse
results_RefGrouped <- map_df(tg_numbers, summarize_data_RefGrouped)

#names(results_RefGrouped) <- paste0(names(results_RefGrouped), "_ldg")

# Ergebnisse in eine Excel-Datei schreiben
write_xlsx(results_RefGrouped, here::here("tables", "EFSAgenotoxDB_filtered_probs_RefGrouped_sum.xlsx"))

```

```{r}
EFSAgenotoxDB_filtered_probs_RefGrouped <- EFSAgenotoxDB_filtered %>%
  group_by(genotoxguidelinefulltxt, com_name, literature_reference) %>%
 mutate(result_lit = ifelse(all(results == "Negative"), "negative", "positive"))%>%
  ungroup()%>%
  distinct(literature_reference, .keep_all = TRUE)%>%
  group_by(genotoxguidelinefulltxt,com_name)%>%
  mutate(count_entries = n()) %>%
  filter(count_entries > 2)%>%
  group_by(genotoxguidelinefulltxt, com_name, result_lit)%>%
  mutate(count_pos_neg = n())%>%
  mutate(percent_pos_neg = count_pos_neg/count_entries)%>%
 distinct(com_name, result_lit, .keep_all = TRUE)%>%
 mutate(below_66_range = percent_pos_neg >= 0.44 & percent_pos_neg <= 0.66)%>%
mutate(in_66_85_range = percent_pos_neg >= 0.15 & percent_pos_neg < 0.44 | percent_pos_neg > 0.66 & percent_pos_neg <= 0.85 )%>%
mutate(above_85_range = percent_pos_neg < 0.15 | percent_pos_neg > 0.85 )%>%
   ungroup()%>%
  distinct(genotoxguidelinefulltxt, com_name, .keep_all = TRUE)

summarize_data_RefGrouped <- function(tg_number) {
  EFSAgenotoxDB_filtered_probs_RefGrouped %>%
    filter(str_detect(genotoxguidelinefulltxt, as.character(tg_number))) %>%
    summarise(
      guideline_text = toString(unique(gsub("OECD Guideline", "", genotoxguidelinefulltxt))),
      count_below_66_range = sum(below_66_range, na.rm = TRUE),
      count_in_66_85_range = sum(in_66_85_range, na.rm = TRUE),
      count_above_85_range = sum(above_85_range, na.rm = TRUE)
    ) %>%
    mutate(
      total_n = count_below_66_range + count_in_66_85_range + count_above_85_range,
      perc_below66 = round((count_below_66_range / total_n) * 100, 1),
      perc_66_85 = round((count_in_66_85_range / total_n) * 100, 1),
      perc_above85 = round((count_above_85_range / total_n) * 100, 1),
      TG_analysis = paste("TG", tg_number, "_RefGrouped", sep = ""),
    )%>%
    filter(total_n > 2)
}

# Liste der TG Nummern
tg_numbers <- c(471, 473, 476, 487, 490, 474, 475, 483, 486, 488, 489)

# Anwenden der Funktion auf jede TG Nummer und Zusammenführen der Ergebnisse
results_RefGrouped <- map_df(tg_numbers, summarize_data_RefGrouped)

#names(results_RefGrouped) <- paste0(names(results_RefGrouped), "_ldg")

# Ergebnisse in eine Excel-Datei schreiben
write_xlsx(results_RefGrouped, here::here("tables", "EFSAgenotoxDB_filtered_probs_RefGrouped_sum.xlsx"))



```

#### Visualize

```{r}
long_data_RefGrouped <- results_RefGrouped %>%
  mutate(guideline_text_wrapped = str_wrap(guideline_text, width = 30),
         TG_analysis_label = paste(guideline_text_wrapped, " (n=", total_n, ")\n", 
                                   "min/med/max_repl/chem: ", min_replicates, "/", median_replicates, "/", max_replicates, sep = ""))%>%
  pivot_longer(cols = c("perc_below66", "perc_66_85", "perc_above85"),
               names_to = "Category",
               values_to = "Percentage") %>%
  mutate(Category = factor(Category, levels = c("perc_below66","perc_66_85", "perc_above85")))

ggplot(long_data_RefGrouped, aes(x = TG_analysis_label, y = Percentage, fill = Category)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = c("perc_above85" = "green", "perc_66_85" = "yellow", "perc_below66" = "red")) +
  theme_minimal() +
  labs(x = "", y = "Percentage", fill = "Range Category") +
  ggtitle("Variability grouped by chemicals and literature references") +
  theme(axis.text.x = element_text(angle = 75, hjust = 0, vjust = 0.1))

# Speichern des Plots als PNG
ggsave(plot = last_plot(), filename = "bardiagram_EFSAgenotoxDB_filtered_LitRef_probs.png", path = here::here("figures"), height = 200, width = 300, units = "mm", device = "png")
```

# Combined plot

```{r}
long_data_joined <- long_data %>%
  full_join(long_data_RefGrouped) %>%
  mutate(TG_analysis_label = factor(TG_analysis_label, levels = sort(unique(TG_analysis_label))))

# Erstellen des Plots mit der neuen Reihenfolge der Labels
plot <- ggplot(long_data_joined, aes(x = TG_analysis_label, y = Percentage, fill = Category)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = c("perc_above85" = "green", "perc_66_85" = "yellow", "perc_below66" = "red")) +
  theme_minimal() +
  labs(x = "", y = "Percentage", fill = "Range Category") +
  ggtitle("") +
  theme(axis.text.x = element_text(angle = 80, hjust = 0, vjust = 0.1))

# Speichern des Plots als PNG
ggsave(plot = plot, filename = "bardiagram_EFSAgenotoxDB_filtered_joined_probs.png", path = here::here("figures"), height = 200, width = 300, units = "mm", device = "png")

```
